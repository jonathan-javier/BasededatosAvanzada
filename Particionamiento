//poder crear el grupo de particiones utilizamos el comando
cluster=new ShardingTest ({shards: 3, chunksize:1} 


//Inserción de datos sobre el balanceador
(new Mongo("localhost:20006")).getDB("Basededatosavanzada")

//Ingresamos 1’000.000 registros en la tabla Autores
for (i= 0; i < 1000000; i++) {
db.Autores.insert({author : "author" +i, Nombres : "AutorABC " +i, date: new Date() });

//Verificamos la inserción
>db.Autores.count()

//Para ello, abriremos una nueva consola de Mongo desde la que nos conectaremos a cada uno de los nodos con objetos //distintos:
shard1 = new Mongo("localhost:20000")

//Me conecto a la base de datos entrenadores
>shard1DB = shard1.getDB("entrenadores")

//Verifico la inserción de registros
> shard1DB.Autores.count()

//Repetimos la misma secuencia para comprobar los registros que se han almacenado en la base de datos del segundo nodo del //Shard:
> shard2= new Mongo("localhost:20001")


//Me conecto a la base de datos Libros
>shard2DB = shard2.getDB("Biblioteca")

//Verifico la inserción de registros
> shard2DB.Autores.count()

//En dicha consola, podremos comprobar, a través de la función status(), el estado del grupo de Sharding:
> shard1 = new Mongo("localhost:20006") >sh.status()

//Para activar el Sharding utilizaremos la función enableSharding()
>sh.enableSharding("Biblioteca")

//Antes de habilitar los fragmentos, creará un índice en la clave que desea usar como shard:
>db.Autores.ensureIndex({entrenador : 1})

//Activación del balanceador de carga
> sh.getBalancerState() >false

//Ahora sólo nos queda conseguir que el balancer comience a ejecutarse, para ello, utilizamos la función //setBalancerState(boolean).
> sh.setBalancerState(true) > sh.getBalancerState() >true >sh.isBalancerRunning() >true







